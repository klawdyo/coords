function pr(e){console.log(e)}var coords ={initialOptions:{'spaces':true,//Spaces between parts 'degrees':true,//Show degrees. Always true 'minutes':true,//Show minutes. 'seconds':true,//Show seconds. False if minutes is false too 'degreeIndicator':'°',//Degree component indicator 'minuteIndicator':"'",//Minute component indicator 'secondIndicator':'"',//Second component indicator 'showSign':false,//Configure to show sign at start 'showCompassDirection':true,//Configure to show compass direction at end 'decimalSeparator':'.',//Last component's decimal separator
        'decimalPlaces'         : 5, //Arredondar o último componente para um número de casas definido
        //@todo: permitir renomear as direções exibidas
        //'compassDirections'     : { 'north': 'N', 'east': 'E', 'west': 'W', 'south':'S' }, //change compass directions at exibition
        //@todo: Exibir um ícone à direita do campo que permita abrir uma popup e selecionar a localização no mapa
        //'showIcon'              : false, //Show 'openMap' icon at right of input

        //Recalculate widths
        'recalculateWidth'      : true,
        'pixelsBychars'         : 8,

        'saveFormatOptions'     : null,

        //Messages
        'pasteErrorMessage'    : 'The pasted texto isn\'t a valid coordinate',},init:function(strSelector,options){var $obj = this;this.initialOptions = this.options(options);//Se não existir opções para o formato de salvamento,use o padrão if(this.saveFormatOptions == null){this.setSaveFormat(this.initialOptions)}var inputs = document.querySelectorAll(strSelector);for(i = 0;i < inputs.length;i++){$obj.makeAllEverythingAndOthers(inputs[i])}//Return object return this},makeAllEverythingAndOthers:function(objInput){var options = this.initialOptions;//Esconde o input principal objInput.style.display = 'none';var inputName = objInput.getAttribute('name');var showIconClass = this.options.showIcon ? 'coords-show-icon-map':'';//Criando o container var objContainer = document.createElement('DIV');objContainer.className = 'coords-container '+showIconClass+' ';objInput.parentNode.insertBefore(objContainer,objInput.nextSibling);//Verifica se deve exibir o sinal à esquerda if(options.showSign == true){this.createSelect(objContainer,inputName,'signal',['','+','-'])}// Verifica as opções e cria os demais inputs //Sempre exibido this.createElement(objContainer,inputName,'degrees',options.degreeIndicator) //Exibindo quando minutes=true e quando seconds também for if(options.minutes == true || options.seconds == true){this.createElement(objContainer,inputName,'minutes',options.minuteIndicator)}if(options.seconds == true){this.createElement(objContainer,inputName,'seconds',options.secondIndicator)}//Verifica se deve exibir o sinal à esquerda if(options.showCompassDirection == true){this.createSelect(objContainer,inputName,'compass',['','E','N','S','W'])}//Ativando o preenchimento dos campos this.setInitialValues(objInput)},createElement :function(objContainer,inputName,coordsType,indicator){var input = document.createElement('INPUT');input.setAttribute('type','text');input.setAttribute('data-coords-type',coordsType);input.setAttribute('name',inputName+'_coords_'+coordsType);input.setAttribute('class','coords-input coords-'+coordsType);objContainer.appendChild(input);this.eventsHandler(input);var span = document.createElement('SPAN');span.setAttribute('class','coords-indicator coords-'+coordsType);span.innerHTML = indicator;objContainer.appendChild(span)},createSelect :function(objContainer,inputName,selectType,data){var select = document.createElement('SELECT');select.setAttribute('name',inputName+'_'+selectType);select.setAttribute('class','coords-select coords-'+selectType);select.setAttribute('data-coords-type',selectType);objContainer.appendChild(select);for(var i = 0;i < data.length;i++){var opt = document.createElement('option');opt.innerHTML = data[i];opt.value = data[i];select.appendChild(opt)}this.eventsHandler(select)},batchValues :function($objInput,strCoord){var parse = this.parse(strCoord);if(parse == false) return false;//pr(strCoord) //pr(this.initialOptions.decimalPlaces) var children = $objInput.nextSibling.children for(i = 0;i < children.length;i++){switch(children[i].getAttribute('data-coords-type')){case 'signal':children[i].value = parse.signal;break;case 'compass':children[i].value = parse.compass;break;case 'degrees':children[i].value = Number.isInteger(parse.degrees) === true ? parse.degrees:parse.degrees.toFixed(this.initialOptions.decimalPlaces);break;case 'minutes':children[i].value = Number.isInteger(parse.minutes) === true ? parse.minutes:parse.minutes.toFixed(this.initialOptions.decimalPlaces);break;case 'seconds':children[i].value = Number.isInteger(parse.seconds) === true ? parse.seconds:parse.seconds.toFixed(this.initialOptions.decimalPlaces);break}}return true},setInitialValues :function(objInput){if(typeof objInput == 'object' && objInput.tagName == 'INPUT' && objInput.value!== ''){this.batchValues(objInput,objInput.value);this.calculateWidths(objInput);//Altera o próprio valor para o formato definido para salvamento objInput.setAttribute('value',this.convert(objInput.value,this.saveFormatOptions))}},setSaveFormat :function(options){this.saveFormatOptions = this.options(options)},calculateWidths :function(objInput){if(this.initialOptions.recalculateWidth!== true) return;var pixelsBychars = this.initialOptions.pixelsBychars || 8;var children = objInput.nextSibling.children;//pr(objInput) for(i = 0;i < children.length;i++){if(children[i].getAttribute('class').search('coords-input')!== -1){children[i].style.width =((children[i].value.length+1) * pixelsBychars)+'px'}else if(children[i].getAttribute('class').search('coords-select')!== -1){children[i].style.width = '35px'}}},eventsHandler :function(objInput){var $this = this;//Manipula o código ao colar o resultado objInput.addEventListener('paste',function(evnt){$this.onPaste(evnt,$this)});//Manipula o código que seleciona todo o texto ao entrar objInput.addEventListener('focus',function(evnt){$this.onFocus(evnt,$this)});//Manipula o código ao digitar uma tecla objInput.addEventListener('keydown',function(evnt){$this.onKeydown(evnt,$this)});//Evento que atualiza o valor do campo oculto ao realizar alterações objInput.addEventListener('change',function(evnt){$this.onChange(evnt,$this)});objInput.addEventListener('copy',function(evnt){$this.onCopy(evnt,$this)})},onCopy :function(evnt,$this){//console.log(e);//console.log(objInput) evnt.clipboardData.setData('text/plain',$this.inputToString(evnt.target.parentNode.previousSibling));evnt.preventDefault()},onChange :function(evnt,$this){var $container = evnt.target.parentNode;var $children = $container.children;var $input = $container.previousSibling;var strCoord = '';for(i = 0;i < $children.length;i++){if($children[i].tagName == 'INPUT' || $children[i].tagName == 'SELECT'){strCoord+=(typeof $children[i].value == 'undefined' ? '0':$children[i].value)+' '}}$input.setAttribute('value',$this.convert(strCoord,$this.saveFormatOptions))},onKeydown :function(evnt,$this){//pr(evnt.keyCode);if(evnt.target.tagName == 'INPUT' &&(evnt.keyCode>= 48 && evnt.keyCode <= 57 || evnt.keyCode == 188 || evnt.keyCode == 190)){$this.calculateWidths(evnt.target.parentNode.previousSibling)}},onFocus :function(evnt,$this){evnt.stopPropagation();evnt.preventDefault();if(evnt.target.tagName == 'INPUT'){evnt.target.select()}},onPaste :function(evnt,$this){var clipboardData,pastedData;// Stop data actually being pasted into div evnt.stopPropagation();evnt.preventDefault();// Get pasted data via clipboard API clipboardData = evnt.clipboardData || window.clipboardData;pastedData = clipboardData.getData('Text');if($this.batchValues(evnt.target.parentNode.previousSibling,pastedData) === false){alert($this.initialOptions.pasteErrorMessage)}//Recalcula os tamanhos $this.calculateWidths(evnt.target.parentNode.previousSibling)},options :function(options){if(typeof options == 'undefined') return this.initialOptions;//basic rules //degrees is always true options.degrees = true;//seconds is false if minutes is false too if(options.minutes == false) options.seconds = false;//,this.initialOptions,options);return options},normalize :function(strCoord){//strCoord = strCoord //.replace(/(\xb0|\x2da|\x30a|\x2070|\x2218|\x25e6|\x970|\x6f)/g,'°') // ° ˚ ̊ ⁰ ∘ ◦ ॰ º o //.replace(/[\xb0\x2da\x30a\x2070\x2218\x25e6\x970\xba\x6f]/g,'°') // ° ˚ ̊ ⁰ ∘ ◦ ॰ º o // .replace(/[\x27\x2b9\x2bc\x2c8\x301\x5f3\x2032\xa78c]/g,"'") // ' ʹ ʼ ˈ ́  ׳ ′ꞌ
                // .replace(/[\x22\x201e\x201c\x201d]/g, '"') //  " „ “ ” // pr('1) '+strCoord) strCoord = strCoord.replace(/\s{2,}/g," ") //Remove espaços duplos // pr('2) '+strCoord) strCoord = strCoord.replace(/[°˚⁰∘◦॰ºo]+/g,'°') // pr('3) '+strCoord) strCoord = strCoord.replace(/['ʹʼˈ׳′ꞌ]{1}/g, "'")
                // pr('4) '+strCoord)
                strCoord = strCoord.replace("''", '"') //two double quotes
                // pr('5) '+strCoord)
                strCoord = strCoord.replace(/["„“”]+/g, '"')
                // pr('6) '+strCoord)
                strCoord = strCoord.replace(/\,+/g, '.') //transformando vírgulas em pontos
                // pr('7) '+strCoord)
        return strCoord;
    },

    /**
     * parse()
     * Pega os componentes da coordenada
     *
     * @version 0.1 21/01/2017 Initial
     *          0.2 23/01/2017 Parse agora converte todos os valores para DMS,
     *                         independentemente da entrada.
     *
     * @param strCoord
     * @return
     */
    parse : function( strCoord ){
        //Iniciando o parsing normalizado
        strCoord = this.normalize( strCoord );

        //V0.1
        //var pattern = /([NEWS]{1}|[-+]{1})?([0-9,\.]+°)([0-9,\.]+')?([0-9,\.]+")?([NEWS]{1})?/i;//V0.2 - 22/01/2017 - Adicionado suporte ao formato "12 24 56" var pattern = /([NEWS]{1}|[-+]{1})?\s*([0-9,\.]+\s*°?)\s*([0-9,\.]+\s*'?)?\s*([0-9,\.]+\s*"?)?\s*([NEWS]{1})?/i

        var parts = pattern.exec( strCoord );
        // pr(parts)
        if( parts == null ) return false;

        var compassDirections = ['N', 'E', 'W', 'S'];

        //Só tem como determinar qual a direção se for informada, pois em casos negativos podem
        //tanto ser W como S, assim como o positivo podem ser N e E, dependendo se é latitude ou longitude
        var hasCompass = compassDirections.indexOf( parts[1] ) !== -1 ? parts[1].toUpperCase()  : ( compassDirections.indexOf( parts[5] ) !== -1 ? parts[5] : false )
        var hasSignal  = parts[1] == '-'  || ['S', 'W'].indexOf( hasCompass ) !== -1 ? '-' : '+';

        var degrees    = typeof parts[2] !== 'undefined' ?  parseFloat(parts[2]) : 0;
        var minutes    = typeof parts[3] !== 'undefined' ?  parseFloat(parts[3]) : 0;
        var seconds    = typeof parts[4] !== 'undefined' ?  parseFloat(parts[4]) : 0;

        //se minutos for zero e segundos for zero mas tiver casas decimais nos graus, divida os valores com os menores
        if( minutes === 0 && seconds === 0 && ( degrees !== parseInt( degrees ) ) ){
            minutes = ( degrees - parseInt( degrees )  ) * 60;
            degrees = parseInt( degrees );
        }

        //se segundos for zero mas tiver casas decimais nos minutos, divida os valores com ele
        if( seconds === 0 && ( minutes !== parseInt( minutes ) ) ){
            seconds = ( minutes - parseInt( minutes )  ) * 60;
            minutes = parseInt( minutes )
        }

        return {
            signal  : hasSignal,
            compass : hasCompass,
            degrees : degrees,
            minutes : minutes,
            seconds : seconds,
        };
    },

    /**
     * Converte uma coordenada para float a partir de uma string em qualquer formato
     *
     * @version 0.1 22/01/2017 Initial
     *
     * @param string strCoord
     * @return
     */
    stringToDecimal: function( strCoord ){
        return this.convert( strCoord, {
            'degrees'  : true, 'minutes' : false, 'seconds' : false,
            'showSign' : true, 'spaces'  : false, 'degreeIndicator' : '',
            'showCompassDirection' : false
        } );
    },

    /**
     * convert()
     * Converte uma coordenada em float para o formado DD,DDD°
     *
     * @version 0.1 22/01/2017 Initial
     *          0.2 25/01/2017 Conversão realizada por parseObjectToString()
     *
     * @example
     *
     * @param string strCoord Coordenada em qualquer formato de texto
     * @param object options  Objeto de configuração do retorno da conversão
     * @return string
     */
    convert: function( strCoord, options ){
        return this.parseObjectToString( this.parse( strCoord ), options );
    },

    /**
     * inputToString()
     * A partir do objeto input original, devolve o valor dos sub inputs no formato definido em options
     *
     * @version 0.1 25/01/2017 Initial
     *
     * @param (object|input) input Input object ou seletor que localize este input. O seletor precisa levar a somente um objeto
     * @param object options Opções para o retorno da string
     * @return string Contendo os dados do objeto no formato definido em options
     */
    inputToString : function( input, options ){
        //Convertendo para objeto caso "input" seja um seletor
        input = ( typeof input == 'string' ) ? document.querySelector( input ) : input ;

        //Ajustando as opções
        options = this.options(options);

        //Se é um objeto de um input
        if( input.tagName !== 'INPUT' ) { console.log( '"input" parameter isn\'t a valid input object');return false}var $container = input.nextSibling;var $children = $container.children;var strCoord = '';for(i = 0;i < $children.length;i++){if($children[i].tagName == 'INPUT'){strCoord+=($children[i].value == '' ? 0:$children[i].value)}else if($children[i].tagName == 'SELECT' && $children[i].value!== ""){strCoord+= $children[i].value}else{continue}strCoord+= ' '}return this.convert(strCoord,options)},parseObjectToString :function(objParse,options){var newOptions = this.options(options);if(newOptions.seconds == false){objParse.minutes = objParse.minutes+(objParse.seconds / 60);objParse.seconds = false}if(newOptions.minutes == false){objParse.degrees = objParse.degrees+(objParse.minutes / 60);objParse.minutes = false}var spaces = newOptions.spaces ? ' ' :'';return(//Exibindo o sinal caso a opção esteja definida(newOptions.showSign ? objParse.signal+spaces :'') //exibindo a parte dos graus junto com a opção do indicador+objParse.degrees+newOptions.degreeIndicator // //Exibindo a parte dos minutos+(newOptions.minutes == true ? spaces+objParse.minutes+newOptions.minuteIndicator :'') // //Exibindo a parte dos segundos+(newOptions.seconds == true ? spaces+objParse.seconds+newOptions.secondIndicator :'') // //imprimindo a direção da bússola+(newOptions.showCompassDirection && objParse.compass ? spaces+objParse.compass :'') //+(newOptions.showCompassDirection && objParse.compass ? spaces+newOptions.compassDirections.indexOf(objParse.compass) :'') // //substituindo os pontos e vírgulas pela opção definida).replace(/[,\.]+/g,newOptions.decimalSeparator).trim()},};if(window.jQuery){jQuery.fn.extend({'coords':function(options){coords.init(this.selector,options);return this},});$(function(){//Exemplo //Inicia a biblioteca via jQuery // $('input[type="coords"]').coords({minutes:true,seconds:true});//$('input.coords').coords({minutes:true,seconds:true})})}